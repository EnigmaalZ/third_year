@using Article.Models;
@model List<Articles>
@{
    Layout = null;
}


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <link href="~/Styles/StyleSheet1.css" rel="stylesheet" />
</head>
<body>
    <div id="conteneur">
        <div id="conteneurImgPreview">
            <span>Photo :</span>
            <img id="imgPreview" src="/img/default.png" alt="img non trouvée" />
            <label for="imgToUpload" id="fileToUpload">Ajouter une image</label><input id="imgToUpload" type="file" /><input type="button" value="Preview" id="preview" />
            <div id="messImg"></div>
        </div>
        <form action="~/Controllers/AddArticle" method="post" enctype="multipart/form-data">
            <input type="hidden" id="IdImg" value="" />
            <div><label for="Nom">Nom :</label><input id="Nom" name="nom" type="text" value="" /></div>
            <div><label for="Descriptif">Descriptif :</label><textarea name="Descriptif" id="Descriptif"></textarea></div>
            <div><label for="Promo">En promotion ?</label><input type="checkbox" name="promotion" id="Promo" /></div>
            <div><input type="button" value="Envoyer" id="Valider" /></div>
            <div id="messForm"></div>
        </form>
    </div>
    <div id="conteneurAllArticle">
        @foreach ( Articles a in Model ) {
            <div>
                <div id="photoArticle">
                    <img src="@ViewBag.Base64String" />
                </div>
                <div id="allDataArticle">
                    <div>Nom :@a.Nom<br /></div>
                    <div>Descriptif :@a.Descriptif<br /></div>
                    <div>Promotion :@a.Promo<br /></div>
                </div>
            </div>
        }
    </div>
</body>
</html>
<script src="~/Scripts/jquery-3.2.1.js"></script>
@* 
TODO LIST
    * vérifier que le fichier est bien une image ( content type )
    * Capturer l'erreur coté serveur si ce n'est pas une image
    * Vérifier que le fichier repsecte les conditions de poids
    * vérifier que chaque champs est bien du type voulu
    * Retourner différentes erreurs en JSON pour les traiter côté clients
    * Confirmer à l'utilisateur que l'enregistrement s'est bien déroulé
    * Vérifier que la BDD est contactable
    * Image par défaut en cas de mauvais retour
    * redimensionner l'image si nécessaire pour l'adapter aux cadres prévus.
    * Index -> lister les articles depuis la BDD contenant ( photo -> descriptif au survol, Nom, prix, stock, promotion )
    * integration photo depuis Razor src /home/getpicture/id ( méthode retour avc fileResult )
      ( la requete sera asynchrone directement depuis le Razor et le naviguateur )
*@